[
    {
      "name": "AddMemberAtRuntime",
      "pl": "Java",
      "shortDescription": "Set of class members can change at runtime",
      "concepts": [
        "Class",
        "Method",
        "Field",
        "Allocation"
      ],
      "status": "public"
    },
    {
      "name": "AllClassesHaveDefaultConstructor",
      "pl": "Java",
      "shortDescription": "Classes always automatically get a no-argument constructor",
      "concepts": [
        "Class",
        "Constructor"
      ],
      "status": "draft"
    },
    {
      "name": "AnyClassException",
      "pl": "Java",
      "shortDescription": "Any class can be an exception class",
      "concepts": [
        "Exception",
        "Class"
      ],
      "status": "draft"
    },
    {
      "name": "ArithmeticPlusPrecedes",
      "pl": "Java",
      "shortDescription": "If on both sides of a + there are numbers, then + adds those numbers",
      "concepts": [
        "String",
        "Expression",
        "Operator",
        "Precedence",
        "Associativity"
      ],
      "status": "public"
    },
    {
      "name": "ArrayAllocationWithoutNew",
      "pl": "Java",
      "shortDescription": "Arrays are created without the new keyword",
      "concepts": [
        "Array",
        "Allocation"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayBracketCountIsLength",
      "pl": "Java",
      "shortDescription": "The number of brackets in an array type or an array initializer corresponds to the length of the array",
      "concepts": [
        "Array",
        "Allocation"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayDimensionalityIsLength",
      "pl": "Java",
      "shortDescription": "Array dimensions is the same thing as array elements",
      "concepts": [
        "Array"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayDimensionsNotPartOfType",
      "pl": "Java",
      "shortDescription": "The number of dimensions in an array type does not matter",
      "concepts": [
        "Array",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayElementTypeRepeats",
      "pl": "Java",
      "shortDescription": "The type of a multi-dimensional array is written as T[] T[] T[]",
      "concepts": [
        "Array",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayElementsUntyped",
      "pl": "Java",
      "shortDescription": "Elements of arrays are untyped",
      "concepts": [
        "Array",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "ArrayHasLengthMethod",
      "pl": "Java",
      "shortDescription": "To get the length of an array, one needs to call its length method",
      "concepts": [
        "Array",
        "Method",
        "Field"
      ],
      "status": "public"
    },
    {
      "name": "ArrayListIsArray",
      "pl": "Java",
      "shortDescription": "ArrayLists are arrays",
      "concepts": [
        "Array"
      ],
      "status": "public"
    },
    {
      "name": "ArrayLiteralContentsInBrackets",
      "pl": "Java",
      "shortDescription": "Arrays can be initialized by passing element values between square brackets (e.g., new T[v])",
      "concepts": [
        "Array",
        "Literal"
      ],
      "status": "draft"
    },
    {
      "name": "ArraysGrow",
      "pl": "Java",
      "shortDescription": "Arrays can grow dynamically",
      "concepts": [
        "Array",
        "Allocation"
      ],
      "status": "public"
    },
    {
      "name": "ArrayLengthPartOfType",
      "pl": "Java",
      "shortDescription": "The length of an array is part of its type",
      "concepts": [
        "Array",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "AssignCompares",
      "pl": "Java",
      "shortDescription": "= compares two values",
      "concepts": [
        "Assignment",
        "Equality",
        "Expression",
        "Operator"
      ],
      "status": "public"
    },
    {
      "name": "AssignmentCopiesObject",
      "pl": "Java",
      "shortDescription": "Objects are assigned by value",
      "concepts": [
        "Assignment",
        "Variable",
        "Object",
        "Reference"
      ],
      "status": "public"
    },
    {
      "name": "AssignmentNotExpression",
      "pl": "Java",
      "shortDescription": "An assignment a=b is not an expression",
      "concepts": [
        "Expression",
        "Operator",
        "Assignment"
      ],
      "status": "public"
    },
    {
      "name": "BaseCaseNotNeeded",
      "pl": "Java",
      "shortDescription": "BaseCaseNotNeeded",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "BaseCaseSelfRecursive",
      "pl": "Java",
      "shortDescription": "The base case of a structural recursion consists of a recursive self-call",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "BoxedNull",
      "pl": "Java",
      "shortDescription": "new Boolean(null) creates a wrapper object that represents the absence of a boolean",
      "concepts": [
        "Reference",
        "Object",
        "Null",
        "Literal"
      ],
      "status": "draft"
    },
    {
      "name": "CallNotStaticallyChecked",
      "pl": "Java",
      "shortDescription": "One can invoke a method on a reference of a class that does not have that method",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CallOnPrimitive",
      "pl": "Java",
      "shortDescription": "One can invoke a method on primitive values",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CallRequiresVariable",
      "pl": "Java",
      "shortDescription": "One needs a variable to invoke a method",
      "concepts": [
        "Method",
        "Call"
      ],
      "status": "draft"
    },
    {
      "name": "CallWithoutFrame",
      "pl": "Java",
      "shortDescription": "A method invocation does not necessarily allocate a stack frame",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CallerFrameContainsCalleeFormal",
      "pl": "Java",
      "shortDescription": "Stack frame of caller includes variables for callee's formal parameters",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CannotChainMemberAccesses",
      "pl": "Java",
      "shortDescription": "One cannot chain member accesses together",
      "concepts": [
        "Method",
        "Call",
        "Field",
        "Member",
        "Expression",
        "Operator"
      ],
      "status": "public"
    },
    {
      "name": "CannotChainMemberToConstructor",
      "pl": "Java",
      "shortDescription": "One cannot chain a method call or a field access to a constructor invocation",
      "concepts": [
        "Method",
        "Field",
        "Member",
        "Constructor",
        "Call",
        "Expression",
        "Operator"
      ],
      "status": "public"
    },
    {
      "name": "CatchAlwaysExecutes",
      "pl": "Java",
      "shortDescription": "Catch blocks always get executed",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CatchProvidesOptions",
      "pl": "Java",
      "shortDescription": "Only the necessary part of a catch block executes",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "CharNotNumeric",
      "pl": "Java",
      "shortDescription": "Char is not a numeric type",
      "concepts": [
        "Number",
        "String",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "ComparisonWithBooleanLiteral",
      "pl": "Java",
      "shortDescription": "To test whether an expression is true or false, compare it to true or to false",
      "concepts": [
        "Expression",
        "Operator",
        "Equality",
        "Boolean"
      ],
      "status": "public"
    },
    {
      "name": "CompositeExpressionsUntyped",
      "pl": "Java",
      "shortDescription": "Expressions that consist of multiple parts have no type",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConcreteClassMustOverride",
      "pl": "Java",
      "shortDescription": "A concrete class needs to implement all methods declared in its abstract superclasses",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConcreteClassOnlyImplementClassAbstract",
      "pl": "Java",
      "shortDescription": "A concrete class only needs to implement those abstract methods it inherits from abstract superclasses",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConcreteClassOnlyImplementDirectAbstract",
      "pl": "Java",
      "shortDescription": "A concrete class only needs to implement abstract methods declared in its direct supertypes",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConcreteClassOnlyImplementInterfaceAbstract",
      "pl": "Java",
      "shortDescription": "A concrete class only needs to implement those abstract methods it inherits from interfaces",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConditionOneOutEdge",
      "pl": "Java",
      "shortDescription": "A condition node in a control-flow graph can have a single outgoing edge",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConditionalIsSequence",
      "pl": "Java",
      "shortDescription": "If-else is equivalent to sequence of two ifs",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConstructorAllocates",
      "pl": "Java",
      "shortDescription": "Constructors allocate objects",
      "concepts": [
        "Allocation",
        "Constructor",
        "Call"
      ],
      "status": "public"
    },
    {
      "name": "ConstructorParameterIsField",
      "pl": "Java",
      "shortDescription": "Formal constructor parameters are equivalent to instance variables",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ConstructorReturnsObject",
      "pl": "Java",
      "shortDescription": "Constructors need to return objects",
      "concepts": [
        "Allocation",
        "Constructor",
        "Call",
        "Return"
      ],
      "status": "public"
    },
    {
      "name": "ConstructorWithoutNew",
      "pl": "Java",
      "shortDescription": "new is not needed to instantiate a class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ControlledLocalAccess",
      "pl": "Java",
      "shortDescription": "One can control access to local variables using access modifiers",
      "concepts": [
        "Variable",
        "Scope",
        "Lifetime",
        "AccessModifier"
      ],
      "status": "public"
    },
    {
      "name": "DeferredReturn",
      "pl": "Java",
      "shortDescription": "A return statement in the middle of a method doesn't return immediately",
      "concepts": [
        "Return",
        "ControlFlow",
        "Method",
        "Call"
      ],
      "status": "public"
    },
    {
      "name": "ElsIf",
      "pl": "Java",
      "shortDescription": "There is an elsif keyword for multi-way conditional statements",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ElseAlwaysExecutes",
      "pl": "Java",
      "shortDescription": "The else branch of an if-else statement always executes",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "EqualsComparesReferences",
      "pl": "Java",
      "shortDescription": "o.equals(p) checks whether o and p are the same instance",
      "concepts": [
        "Equality"
      ],
      "status": "draft"
    },
    {
      "name": "EvaluationResultsArePrinted",
      "pl": "Java",
      "shortDescription": "Evaluating an expression means outputting its result",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ExceptionRoot",
      "pl": "Java",
      "shortDescription": "Exception is the top-most exception class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ExpressionsDynamicallyTyped",
      "pl": "Java",
      "shortDescription": "One has to evaluate an expression to determine its type",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "FinalReferenceImpliesImmutability",
      "pl": "Java",
      "shortDescription": "An object referred to by a final variable is an immutable object",
      "concepts": [
        "Mutability",
        "Reference"
      ],
      "status": "public"
    },
    {
      "name": "ForEachTraversesRecursiveStructure",
      "pl": "Java",
      "shortDescription": "ForEachTraversesRecursiveStructure",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ForEachVariableIsElement",
      "pl": "Java",
      "shortDescription": "The variable in a for-each statement corresponds to an element of the array or collection",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ForIsConditional",
      "pl": "Java",
      "shortDescription": "The body of a for loop either never executes, or it executes once",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ForVariableScopeBeyondLoop",
      "pl": "Java",
      "shortDescription": "ForVariableScopeBeyondLoop",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "FrameIsClassInstance",
      "pl": "Java",
      "shortDescription": "A stack frame is the same as an instance of a class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "IfIsLoop",
      "pl": "Java",
      "shortDescription": "The body of an if statement executes repeatedly, until the condition does not hold anymore",
      "concepts": [
        "Conditional",
        "ControlFlow"
      ],
      "status": "public"
    },
    {
      "name": "IfRequiresElse",
      "pl": "Java",
      "shortDescription": "Every if statement requires an else",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ImmutableRequiresFinalParameters",
      "pl": "Java",
      "shortDescription": "Immutable classes need final constructor/method parameters",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ImplicitInterfaceImplementation",
      "pl": "Java",
      "shortDescription": "Java implicitly produces implementations of any methods a class inherits from the interfaces it implements",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "InlineCallInExpressionTree",
      "pl": "Java",
      "shortDescription": "The expression tree of an expression involving a call inlines the call's computation of the returned value",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "InlineVariableInExpressionTree",
      "pl": "Java",
      "shortDescription": "The expression tree of an expression involving a variable inlines the variable's definition",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "IntegerDivisionToRational",
      "pl": "Java",
      "shortDescription": "Dividing two integers can produce a rational number",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "InterfaceExtendClass",
      "pl": "Java",
      "shortDescription": "An interface can extend a class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "InterproceduralEdge",
      "pl": "Java",
      "shortDescription": "In an intra-procedural control-flow graph, method call nodes point to the called method",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "LargeIntegerLong",
      "pl": "Java",
      "shortDescription": "Large integer numbers are long literals",
      "concepts": [
        "Literal",
        "Number",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "LiteralNoExpression",
      "pl": "Java",
      "shortDescription": "A literal is not an expression",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "LiteralString",
      "pl": "Java",
      "shortDescription": "LiteralString",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "LocalVariablesAutoInitialized",
      "pl": "Java",
      "shortDescription": "Local variables are automatically initialized",
      "concepts": [
        "Variable",
        "Value",
        "Assignment"
      ],
      "status": "public"
    },
    {
      "name": "LoopBodyScopeImpliesLoopLifetime",
      "pl": "Java",
      "shortDescription": "LoopBodyScopeImpliesLoopLifetime",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MapIsMultiMap",
      "pl": "Java",
      "shortDescription": "Maps can store multiple values for a given key",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MapPutNoOverwrite",
      "pl": "Java",
      "shortDescription": "Map.put with an existing key does nothing",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MapToBooleanWithConditionalOperator",
      "pl": "Java",
      "shortDescription": "The conditional operator is helpful to convert something into a boolean",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MapToBooleanWithIf",
      "pl": "Java",
      "shortDescription": "An if statement is helpful to convert something into a boolean",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MethodAsField",
      "pl": "Java",
      "shortDescription": "MethodAsField",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MethodWithoutReturnType",
      "pl": "Java",
      "shortDescription": "A method declaration does not need to include a return type",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MethodsWithoutClass",
      "pl": "Java",
      "shortDescription": "Methods can be defined outside a class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MultiReferenceVariable",
      "pl": "Java",
      "shortDescription": "A reference variable can point to multiple objects",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MultiValueVariable",
      "pl": "Java",
      "shortDescription": "A variable can contain more than one value",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MultidimensionalArray",
      "pl": "Java",
      "shortDescription": "A multi-dimensional array is one thing",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MultipleSuperclasses",
      "pl": "Java",
      "shortDescription": "A class can have multiple superclasses",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "MustInitializeFieldInConstructor",
      "pl": "Java",
      "shortDescription": "Constructors must assign values to all fields",
      "concepts": [
        "Assignment",
        "Constructor",
        "Field",
        "Value",
        "Variable"
      ],
      "status": "public"
    },
    {
      "name": "NamedTypeParameter",
      "pl": "Java",
      "shortDescription": "To instantiate a generic type, one needs to specify type parameter names as well as types ",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NestedObjectsImplyNestedClasses",
      "pl": "Java",
      "shortDescription": "If objects are part of a containment hierarchy, their classes are nested, too",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NestedPackages",
      "pl": "Java",
      "shortDescription": "Packages can contain other packages",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoAtomicExpression",
      "pl": "Java",
      "shortDescription": "Expressions must consist of more than one piece",
      "concepts": [
        "Expression",
        "Operator",
        "Literal",
        "Variable"
      ],
      "status": "public"
    },
    {
      "name": "NoCallOnStringLiteral",
      "pl": "Java",
      "shortDescription": "One cannot invoke methods on String literals",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoCastIfSameSize",
      "pl": "Java",
      "shortDescription": "If a variable is at least as big (bit-width) as a value, then no cast is needed to a assign the value to the variable",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoCharEscape",
      "pl": "Java",
      "shortDescription": " is a normal character in char and String literals",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoEmptyConstructor",
      "pl": "Java",
      "shortDescription": "A constructor most do something",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoFieldInheritance",
      "pl": "Java",
      "shortDescription": "An object contains only the fields declared in its class",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoFieldlessObjects",
      "pl": "Java",
      "shortDescription": "Objects without instance variables can't exist",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoFloatLiterals",
      "pl": "Java",
      "shortDescription": "There are no float literals",
      "concepts": [
        "Literal",
        "Number",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "NoJaggedArrays",
      "pl": "Java",
      "shortDescription": "Multi-dimensional arrays have a rectangular shape",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoLocalVariables",
      "pl": "Java",
      "shortDescription": "There are no local variables",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NoLongLiterals",
      "pl": "Java",
      "shortDescription": "There are no long literals",
      "concepts": [
        "Literal",
        "Number",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "NoReservedWords",
      "pl": "Java",
      "shortDescription": "Every sequence of letters and digits starting with a letter can be used as an identifier",
      "concepts": [
        "Name"
      ],
      "status": "public"
    },
    {
      "name": "NoShortCircuit",
      "pl": "Java",
      "shortDescription": "&& and || always evaluate both operands",
      "concepts": [
        "Expression",
        "Operator",
        "Boolean"
      ],
      "status": "draft"
    },
    {
      "name": "NoSingleLogicAnd",
      "pl": "Java",
      "shortDescription": "& is only a bitwise AND",
      "concepts": [
        "Operator",
        "Boolean"
      ],
      "status": "public"
    },
    {
      "name": "NoStringToString",
      "pl": "Java",
      "shortDescription": "One can’t invoke toString() on an object that’s already a String",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "NullIsObject",
      "pl": "Java",
      "shortDescription": "null is an object",
      "concepts": [
        "Reference",
        "Object",
        "Null",
        "Literal",
        "Value"
      ],
      "status": "public"
    },
    {
      "name": "NumericToBooleanCoercion",
      "pl": "Java",
      "shortDescription": "Numeric types can be coerced to boolean",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ObjectLabeledWithConstructorSignature",
      "pl": "Java",
      "shortDescription": "In stack and heap diagrams, an object on the heap is labeled like a stack frame of a constructor call",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ObjectLabeledWithVariableName",
      "pl": "Java",
      "shortDescription": "In stack and heap diagrams, an object on the heap is labeled with the name of the variable that refers to it",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ObjectsMustBeNamed",
      "pl": "Java",
      "shortDescription": "A variable is needed to instantiate an object",
      "concepts": [
        "Allocation",
        "Constructor",
        "Call",
        "Expression"
      ],
      "status": "public"
    },
    {
      "name": "OnlyInnermostArrayElements",
      "pl": "Java",
      "shortDescription": "Only the elements of the innermost array of a multi-dimensional array are accessible",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "OnlyRuntimeLibraryPackages",
      "pl": "Java",
      "shortDescription": "Normal developers do not create packages",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "OutOfBoundsElementsAreNull",
      "pl": "Java",
      "shortDescription": "Out-of-bounds array elements are null",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "OutsideInMethodNesting",
      "pl": "Java",
      "shortDescription": "Nested method calls are invoked outside in",
      "concepts": [
        "Method",
        "Call",
        "Expression",
        "Function",
        "Composition"
      ],
      "status": "public"
    },
    {
      "name": "ParenthesesOnlyIfArgument",
      "pl": "Java",
      "shortDescription": "() are optional for method calls",
      "concepts": [
        "Method",
        "Call",
        "Expression"
      ],
      "status": "public"
    },
    {
      "name": "PreIncrementBeforeLoop",
      "pl": "Java",
      "shortDescription": "Pre-increment in for loop header means increment before loop body",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "PrimitiveIsObject",
      "pl": "Java",
      "shortDescription": "Primitive values are heap objects",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "PrimitiveTypeParameter",
      "pl": "Java",
      "shortDescription": "Type parameters of generic types can be assigned primitive types",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "PrimitiveVariablesDynamicallyTyped",
      "pl": "Java",
      "shortDescription": "The type of a primitive variable depends on its value",
      "concepts": [
        "Type",
        "Value"
      ],
      "status": "draft"
    },
    {
      "name": "PrintNewLineFirst",
      "pl": "Java",
      "shortDescription": "PrintNewLineFirst",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "PrivateFieldsImplyImmutability",
      "pl": "Java",
      "shortDescription": "A class where all fields are private is immutable",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "PrivateFromOtherInstance",
      "pl": "Java",
      "shortDescription": "An object cannot access private members of any other object",
      "concepts": [
        "AccessModifier",
        "Member"
      ],
      "status": "public"
    },
    {
      "name": "PrivateFromStatic",
      "pl": "Java",
      "shortDescription": "Static methods cannot access private members",
      "concepts": [
        "AccessModifier",
        "Member",
        "Static"
      ],
      "status": "public"
    },
    {
      "name": "PrivateMeansFinal",
      "pl": "Java",
      "shortDescription": "A private field cannot be changed",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "RationalLiterals",
      "pl": "Java",
      "shortDescription": "Rational fractions are literals",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "RecursiveActivationsShareFrame",
      "pl": "Java",
      "shortDescription": "Recursive calls of a method share a stack frame",
      "concepts": [
        "Recursion",
        "Stack"
      ],
      "status": "public"
    },
    {
      "name": "RecursiveCallSiteNoReturn",
      "pl": "Java",
      "shortDescription": "Tail-recursive call sites have no continuation",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "RecursiveMethodImpliesRecursiveType",
      "pl": "Java",
      "shortDescription": "A class with a recursive method is a recursive type",
      "concepts": [
        "Recursion",
        "Method",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "RecursiveMethodNeedsIfElse",
      "pl": "Java",
      "shortDescription": "A recursive method needs to contain an if-else statement",
      "concepts": [
        "Recursion",
        "Method",
        "Conditional"
      ],
      "status": "public"
    },
    {
      "name": "ReferenceIntoStack",
      "pl": "Java",
      "shortDescription": "References can point into the stack",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReferenceLabeledWithDynamicType",
      "pl": "Java",
      "shortDescription": "In stack and heap diagrams, reference variables are labeled with the types of the objects they refer to",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReferenceToBooleanCoercion",
      "pl": "Java",
      "shortDescription": "Reference types can be coerced to boolean",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReferenceToIntegerConversion",
      "pl": "Java",
      "shortDescription": "One can cast between references and ints ",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReferenceToVariable",
      "pl": "Java",
      "shortDescription": "References can point to variables",
      "concepts": [
        "Reference",
        "Variable"
      ],
      "status": "public"
    },
    {
      "name": "ReferringToRecursiveStructureMakesRecursive",
      "pl": "Java",
      "shortDescription": "A class referring to a recursive data structure is (indirectly) part of that recursion as well",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReturnCall",
      "pl": "Java",
      "shortDescription": "Return statement needs () around the value to return",
      "concepts": [
        "Return",
        "Method",
        "Call"
      ],
      "status": "public"
    },
    {
      "name": "ReturnNoOutEdge",
      "pl": "Java",
      "shortDescription": "In a control-flow graph, a return statement has no outgoing edge",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ReturnUnwindsMultipleFrames",
      "pl": "Java",
      "shortDescription": "A return statement can unwind multiple call stack frames",
      "concepts": [
        "Return",
        "Stack",
        "Recursion"
      ],
      "status": "public"
    },
    {
      "name": "RightToLeftChaining",
      "pl": "Java",
      "shortDescription": "Chained accesses are invoked from right to left",
      "concepts": [
        "Method",
        "Call",
        "Field",
        "Member",
        "Expression",
        "Operator",
        "Associativity"
      ],
      "status": "public"
    },
    {
      "name": "RuntimeExceptionChecked",
      "pl": "Java",
      "shortDescription": "RuntimeExceptions are checked exceptions",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "SemanticEquivalenceImpliesSyntacticEquivalence",
      "pl": "Java",
      "shortDescription": "SemanticEquivalenceImpliesSyntacticEquivalence",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "SetterIsStatic",
      "pl": "Java",
      "shortDescription": "Setter methods are static",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "SingleQuoteString",
      "pl": "Java",
      "shortDescription": "String literals can be in single quotes",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "StackTraceIsCallHistory",
      "pl": "Java",
      "shortDescription": "A stack trace is the sequence of previously called methods",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "StatementMultipleOutEdges",
      "pl": "Java",
      "shortDescription": "A non-condition node in a control-flow graph can have multiple outgoing edges",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "StaticCallPolymorphic",
      "pl": "Java",
      "shortDescription": "A static method call is dispatched polymorphically at runtime based on the argument types",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "StaticFrameInGlobals",
      "pl": "Java",
      "shortDescription": "Stack frame of static method calls lives in the global memory area",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "StringLiteralNoObject",
      "pl": "Java",
      "shortDescription": "One needs to call the String constructor to get a String object from a literal",
      "concepts": [
        "Literal",
        "String"
      ],
      "status": "public"
    },
    {
      "name": "StringPlusStringifiesExpression",
      "pl": "Java",
      "shortDescription": "String contatenation stringifies the operands",
      "concepts": [
        "String",
        "Expression",
        "Operator"
      ],
      "status": "public"
    },
    {
      "name": "StringRepetitionOperator",
      "pl": "Java",
      "shortDescription": "One can repeat a String by multiplying it with a number",
      "concepts": [
        "String",
        "Number",
        "Repetition"
      ],
      "status": "draft"
    },
    {
      "name": "TargetTyping",
      "pl": "Java",
      "shortDescription": "The type of a numerical expression depends on the context in which it is placed",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ThisAsField",
      "pl": "Java",
      "shortDescription": "ThisAsField",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ThisAssignable",
      "pl": "Java",
      "shortDescription": "One can assign to this",
      "concepts": [
        "Variable",
        "Reference",
        "Assignment",
        "Object",
        "Mutability"
      ],
      "status": "public"
    },
    {
      "name": "ThisCanBeNull",
      "pl": "Java",
      "shortDescription": "ThisCanBeNull",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ThisChildInCallExpression",
      "pl": "Java",
      "shortDescription": "Every instance method or constructor call node in an expression tree must have a child labeled \"this\"",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ThisExistsInStaticMethod",
      "pl": "Java",
      "shortDescription": "this is a local variable, also in static methods",
      "concepts": [
        "Variable",
        "Reference",
        "Object",
        "Static",
        "Method"
      ],
      "status": "public"
    },
    {
      "name": "ThisInConstructorIsNull",
      "pl": "Java",
      "shortDescription": "In a constructor, this is null",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ThisNoExpression",
      "pl": "Java",
      "shortDescription": "this is not an expression",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ToStringPrints",
      "pl": "Java",
      "shortDescription": "Invoking toString() prints something",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "TryFinishes",
      "pl": "Java",
      "shortDescription": "Exceptions get thrown at the end of the try block",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "TypingRequiresEvaluating",
      "pl": "Java",
      "shortDescription": "Evaluating an expression is the same as determining the type of that expression",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "TryCatchMandatory",
      "pl": "Java",
      "shortDescription": "If code could throw an exception, you must surround that code with a try/catch block",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "UndeclaredVariables",
      "pl": "Java",
      "shortDescription": "Variables don't need to be declared",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "UnqualifiedNamesMustDiffer",
      "pl": "Java",
      "shortDescription": "The unqualified names of different classes must be different",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "UntypedVariables",
      "pl": "Java",
      "shortDescription": "Variable declarations don't need a type",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "UseOfSelfTypeImpliesRecursiveType",
      "pl": "Java",
      "shortDescription": "If a class has a method that has a local variable, parameter, or return value with the class as its type, the class is a recursive type",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "VariablesHoldExpressions",
      "pl": "Java",
      "shortDescription": "An expression is stored in a variable",
      "concepts": [
        "Variable",
        "Expression",
        "Assignment"
      ],
      "status": "public"
    },
    {
      "name": "VariablesHoldObjects",
      "pl": "Java",
      "shortDescription": "A variable contains a whole object, not a reference to it",
      "concepts": [
        "Variable",
        "Object",
        "Reference"
      ],
      "status": "public"
    },
    {
      "name": "VoidMethodNotRecursive",
      "pl": "Java",
      "shortDescription": "Method with void return type can't be recursive",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "VoidMethodReturnsValue",
      "pl": "Java",
      "shortDescription": "A method with void return type can return a value",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ZeroDigitsCompress",
      "pl": "Java",
      "shortDescription": "In integer numbers, decimal digits with value `0` take less storage than decimal digits with other values",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ZeroInEdges",
      "pl": "Java",
      "shortDescription": "A control-flow graph node can have zero incoming edges",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "ZeroOutEdges",
      "pl": "Java",
      "shortDescription": "A control-flow graph node can have zero outgoing edges",
      "concepts": null,
      "status": "draft"
    },
    {
      "name": "AccessingInexistentPropertyError",
      "pl": "JavaScript",
      "shortDescription": "Accessing a non existent property on an object produces an error",
      "concepts": [
        "Exception",
        "Field",
        "Member",
        "Object",
        "Undefined"
      ],
      "status": "draft"
    },
    {
      "name": "ArrowFunctionRequiresFunctionKeyword",
      "pl": "JavaScript",
      "shortDescription": "Arrow functions also require the keyword 'function'",
      "concepts": [
        "Function",
        "Expression"
      ],
      "status": "draft"
    },
    {
      "name": "AssignmentCopiesObject",
      "pl": "JavaScript",
      "shortDescription": "Objects are assigned by value",
      "concepts": [
        "Assignment",
        "Variable",
        "Object",
        "Reference"
      ],
      "status": "public"
    },
    {
      "name": "ClassDefinesType",
      "pl": "JavaScript",
      "shortDescription": "The type of an object instance is equivalent to the type defined by its class definition",
      "concepts": [
        "Class",
        "Type"
      ],
      "status": "public"
    },
    {
      "name": "ConditionalOperatorNotExpression",
      "pl": "JavaScript",
      "shortDescription": "The conditional operator is not an expression",
      "concepts": [
        "Expression",
        "Operator",
        "Conditional"
      ],
      "status": "draft"
    },
    {
      "name": "ConstDeclarationCanBeLeftUninitialized",
      "pl": "JavaScript",
      "shortDescription": "Declarations of constants do not need to be immediately initialized",
      "concepts": [
        "Assignment",
        "Variable"
      ],
      "status": "draft"
    },
    {
      "name": "ConstReferenceImpliesImmutability",
      "pl": "JavaScript",
      "shortDescription": "An object referred to by a const variable is an immutable object",
      "concepts": [
        "Mutability",
        "Reference"
      ],
      "status": "public"
    },
    {
      "name": "EqualityOperatorComparesObjectsValues",
      "pl": "JavaScript",
      "shortDescription": "The equality operator compares two objects' values",
      "concepts": [
        "Equality",
        "Object",
        "Operator",
        "Reference",
        "Value"
      ],
      "status": "draft"
    },
    {
      "name": "EqualityOperatorComparesOnlyTypes",
      "pl": "JavaScript",
      "shortDescription": "The equality operator '==' compares only the types of the operands",
      "concepts": [
        "Operator",
        "Equality",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "FunctionOverloading",
      "pl": "JavaScript",
      "shortDescription": "It is possible to create multiple functions with the same name but with different signatures",
      "concepts": [
        "Function",
        "Argument",
        "Parameter"
      ],
      "status": "draft"
    },
    {
      "name": "FunctionsCannotBeImmediatelyInvoked",
      "pl": "JavaScript",
      "shortDescription": "Functions cannot be called in the expression in which they are defined",
      "concepts": [
        "Function",
        "Scope"
      ],
      "status": "draft"
    },
    {
      "name": "FunctionsMustBeNamed",
      "pl": "JavaScript",
      "shortDescription": "Every function definition requires an associated name",
      "concepts": [
        "Function",
        "Scope"
      ],
      "status": "draft"
    },
    {
      "name": "IdentifierAsStringInBracketNotation",
      "pl": "JavaScript",
      "shortDescription": "An identifier used to access a property with the bracket notation is treated as a string",
      "concepts": [
        "Expression",
        "String",
        "Field",
        "Object",
        "Precedence"
      ],
      "status": "draft"
    },
    {
      "name": "MandatoryAssignment",
      "pl": "JavaScript",
      "shortDescription": "An expression must be assigned to have a valid statement",
      "concepts": [
        "Assignment",
        "Expression",
        "Statement"
      ],
      "status": "draft"
    },
    {
      "name": "NoAtomicExpression",
      "pl": "JavaScript",
      "shortDescription": "Expressions must consist of more than one piece",
      "concepts": [
        "Expression",
        "Operator",
        "Literal",
        "Variable"
      ],
      "status": "public"
    },
    {
      "name": "NoBracketNotationForObjects",
      "pl": "JavaScript",
      "shortDescription": "Square brackets cannot be used to access properties of an object",
      "concepts": [
        "Object",
        "Field"
      ],
      "status": "draft"
    },
    {
      "name": "NoFunctionCallsChaining",
      "pl": "JavaScript",
      "shortDescription": "It is not allowed to chain function calls",
      "concepts": [
        "Expression",
        "Call",
        "Function",
        "Precedence"
      ],
      "status": "draft"
    },
    {
      "name": "NoGlobalObject",
      "pl": "JavaScript",
      "shortDescription": "There isn't a global object",
      "concepts": [
        "Object",
        "Scope"
      ],
      "status": "draft"
    },
    {
      "name": "NullAndUndefinedAreTheSame",
      "pl": "JavaScript",
      "shortDescription": "The value null and undefined are the same",
      "concepts": [
        "Type",
        "Value",
        "Equality",
        "Null",
        "Undefined"
      ],
      "status": "draft"
    },
    {
      "name": "NullIsObject",
      "pl": "JavaScript",
      "shortDescription": "The value null is an actual object held in memory",
      "concepts": [
        "Null",
        "Object",
        "Reference",
        "Value",
        "Literal"
      ],
      "status": "public"
    },
    {
      "name": "NumberOfParametersMatchArguments",
      "pl": "JavaScript",
      "shortDescription": "Functions must be called with the same number of arguments as defined in their signature",
      "concepts": [
        "Function",
        "Argument",
        "Parameter"
      ],
      "status": "draft"
    },
    {
      "name": "ObjectAsParameterIsCopied",
      "pl": "JavaScript",
      "shortDescription": "Objects are passed by value",
      "concepts": [
        "Argument",
        "Parameter",
        "Object",
        "Reference"
      ],
      "status": "draft"
    },
    {
      "name": "PrototypesAreClasses",
      "pl": "JavaScript",
      "shortDescription": "JavaScript is based on a class-based object model",
      "concepts": [
        "Prototype",
        "Class"
      ],
      "status": "draft"
    },
    {
      "name": "SetTimeout0IsSynchronous",
      "pl": "JavaScript",
      "shortDescription": "Scheduling the execution of a function after 0 milliseconds with setTimeout is equivalent to a synchronous call",
      "concepts": [
        "Call"
      ],
      "status": "draft"
    },
    {
      "name": "SetTimeoutReturnsCallbackResult",
      "pl": "JavaScript",
      "shortDescription": "SetTimeout returns the value returned by the callback function",
      "concepts": [
        "Return"
      ],
      "status": "draft"
    },
    {
      "name": "StringRepetitionOperator",
      "pl": "JavaScript",
      "shortDescription": "One can repeat a String by multiplying it with a number",
      "concepts": [
        "String",
        "Number",
        "Repetition"
      ],
      "status": "draft"
    },
    {
      "name": "ThisAssignable",
      "pl": "JavaScript",
      "shortDescription": "One can assign to this",
      "concepts": [
        "Variable",
        "Reference",
        "Assignment",
        "Object",
        "Mutability"
      ],
      "status": "public"
    },
    {
      "name": "TypeofArrayIsArray",
      "pl": "JavaScript",
      "shortDescription": "The typeof operator applied on an array returns 'array'",
      "concepts": [
        "Array",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "TypeofNullIsNull",
      "pl": "JavaScript",
      "shortDescription": "The value of null is of type Null",
      "concepts": [
        "Value",
        "Type"
      ],
      "status": "draft"
    },
    {
      "name": "NoAtomicExpression",
      "pl": "Python",
      "shortDescription": "Expressions must consist of more than one piece",
      "concepts": [
        "Expression",
        "Operator",
        "Literal",
        "Variable"
      ],
      "status": "public"
    },
    {
      "name": "NoSequenceRepetition",
      "pl": "Python",
      "shortDescription": "There is no operator that repeats sequences",
      "concepts": [
        "String",
        "Sequence",
        "Number",
        "Repetition"
      ],
      "status": "draft"
    },
    {
      "name": "PlusConcatenatesNumbers",
      "pl": "Python",
      "shortDescription": "The plus operator can concatenate strings and numbers",
      "concepts": [
        "String",
        "Sequence",
        "Number",
        "Expression",
        "Operator"
      ],
      "status": "draft"
    }
  ]
